{"version":3,"sources":["webpack:///./src/features/draft-js/components/EditorDefault.js"],"names":["EditorDefault","props","handleEditorChange","bind","focus","state","editorState","EditorState","createEmpty","focusable","view","PropTypes","object","isRequired","this","editor","setState","updateEditorState","combined_editor_state","acceptSelection","getSelection","className","onClick","ref","element","onChange","placeholder","Component"],"mappings":"w5CAMMA,E,sQAEF,WAAYC,GAAO,a,4FAAA,UACf,cAAMA,IAEDC,mBAAqB,EAAKA,mBAAmBC,KAAxB,MAC1B,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,MAEb,EAAKE,MAAQ,CAETC,YAAaC,cAAYC,eARd,E,yCA4CnB,WACI,MAAO,CACHC,WAAW,K,qBAInB,WACI,MAAO,CACHC,KAAMC,IAAUC,OAAOC,WACvBP,YAAaK,IAAUC,OAAOC,gB,kCAzCtC,WACQC,KAAKb,MAAMS,KAAKN,OAChBU,KAAKV,U,mBAIb,WACIU,KAAKC,OAAOX,U,gCAGhB,SAAmBE,GAEfQ,KAAKE,SAAS,CAAEV,gBAEhBQ,KAAKb,MAAMgB,kBAAkBX,K,oBAGjC,WAAS,WAECY,EAAwBX,cAAYY,gBAAgBL,KAAKb,MAAMK,YAAaQ,KAAKT,MAAMC,YAAYc,gBACzG,OACI,yBAAKC,UAAU,wBAAwBC,QAASR,KAAKV,OACjD,kBAAC,SAAD,CACImB,IAAK,SAACC,GAAc,EAAKT,OAASS,GAClClB,YAAaY,EACbO,SAAUX,KAAKZ,mBACfwB,YAAY,6B,8BAxCJC,aA4Db3B","file":"3.thinkhope.js","sourcesContent":["import React, {Component} from 'react';\nimport {Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport '../styles/editorView.css';\nimport PropTypes from \"prop-types\";\n\nclass EditorDefault extends Component {\n\n    constructor(props) {\n        super(props);\n        // bind local event handlers\n        this.handleEditorChange = this.handleEditorChange.bind(this);\n        this.focus = this.focus.bind(this);\n        // initialise state\n        this.state = {\n            // non-text state\n            editorState: EditorState.createEmpty()\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.view.focus) {\n            this.focus();\n        }\n    }\n\n    focus() {\n        this.editor.focus();\n    }\n\n    handleEditorChange(editorState) {\n        // update local state to maintain non-text attributes (e.g. selection)\n        this.setState({ editorState })\n        // call Redux action to update other views\n        this.props.updateEditorState(editorState);\n    }\n\n    render() {\n        // combine text from props with non-text from state\n        const combined_editor_state = EditorState.acceptSelection(this.props.editorState, this.state.editorState.getSelection());\n        return (\n            <div className=\"default-editor editor\" onClick={this.focus}>\n                <Editor\n                    ref={(element) => { this.editor = element; }}\n                    editorState={combined_editor_state}\n                    onChange={this.handleEditorChange}\n                    placeholder=\"write something...\"\n                />\n            </div>\n        );\n    }\n\n    static get characteristics() {\n        return {\n            focusable: true\n        };\n    }\n\n    static get propTypes() {\n        return {\n            view: PropTypes.object.isRequired,\n            editorState: PropTypes.object.isRequired,\n        };\n    }\n}\n\nexport default EditorDefault;\n"],"sourceRoot":""}